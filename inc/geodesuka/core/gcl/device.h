#pragma once
#ifndef GEODESUKA_CORE_GCL_DEVICE_H
#define GEODESUKA_CORE_GCL_DEVICE_H

#include <vector>

#include <vulkan/vulkan.h>

#include "../util/text.h"

namespace geodesuka {
	namespace core {
		namespace gcl {

			class device {
			public:

				friend class device_context;

				VkPhysicalDeviceProperties Properties;
				VkPhysicalDeviceFeatures Features; 				
				std::vector<VkQueueFamilyProperties> QueueFamilyProperties;

				// Managed by engine, should be generated by engine.
				device(VkInstance *aParentInstance, VkPhysicalDevice aPhysicalDevice);
				~device();

				VkInstance* get_inst();
				VkPhysicalDevice get_handle();

			private:

				// Represents a
				VkInstance* ParentInstance;
				VkPhysicalDevice Handle;

			};

		}
	}
}

#endif // !GEODESUKA_CORE_GCL_DEVICE_H
