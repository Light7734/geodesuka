#pragma once
#ifndef GEODESUKA_CORE_GCL_DEVICE_H
#define GEODESUKA_CORE_GCL_DEVICE_H

#include <vulkan/vulkan.h>

namespace geodesuka {
	namespace core {
		namespace gcl {

			class device {
			public:

				// Managed by engine, should be generated by engine.
				device(VkInstance aInstance, VkPhysicalDevice aPhysicalDevice);
				~device();

				// User can provide a list of extensions to this method to check if they are all
				// supported. Will return true if provided list of extensions is supported. Will
				// return false if at least one extension is not supported.
				bool is_extension_list_supported(uint32_t aExtensionCount, const char** aExtensionList) const;

				// ----- Query ----- //

				VkPhysicalDeviceProperties get_properties() const;
				VkPhysicalDeviceFeatures get_features() const;
				const VkExtensionProperties *get_extensions(uint32_t *aExtensionCount) const;
				const VkQueueFamilyProperties *get_queue_families(uint32_t *aQueueFamilyCount) const;

				// ----- Handles ----- //

				VkInstance inst();
				VkPhysicalDevice handle();

			private:

				// Represents a
				VkInstance ParentInstance;
				VkPhysicalDevice Handle;

				uint32_t ExtensionCount;
				VkExtensionProperties* Extension;

				uint32_t QueueFamilyCount;
				VkQueueFamilyProperties* QueueFamily;

			};

		}
	}
}

#endif // !GEODESUKA_CORE_GCL_DEVICE_H
